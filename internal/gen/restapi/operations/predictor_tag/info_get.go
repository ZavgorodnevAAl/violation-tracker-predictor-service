// Code generated by go-swagger; DO NOT EDIT.

package predictor_tag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// InfoGetHandlerFunc turns a function with the right signature into a info get handler
type InfoGetHandlerFunc func(InfoGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn InfoGetHandlerFunc) Handle(params InfoGetParams) middleware.Responder {
	return fn(params)
}

// InfoGetHandler interface for that can handle valid info get params
type InfoGetHandler interface {
	Handle(InfoGetParams) middleware.Responder
}

// NewInfoGet creates a new http.Handler for the info get operation
func NewInfoGet(ctx *middleware.Context, handler InfoGetHandler) *InfoGet {
	return &InfoGet{Context: ctx, Handler: handler}
}

/*
InfoGet swagger:route GET /info predictor_tag infoGet

Запрос на получение информации о предикторе по токену
*/
type InfoGet struct {
	Context *middleware.Context
	Handler InfoGetHandler
}

func (o *InfoGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewInfoGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

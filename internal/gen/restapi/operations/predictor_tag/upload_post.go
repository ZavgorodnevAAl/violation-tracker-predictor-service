// Code generated by go-swagger; DO NOT EDIT.

package predictor_tag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UploadPostHandlerFunc turns a function with the right signature into a upload post handler
type UploadPostHandlerFunc func(UploadPostParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UploadPostHandlerFunc) Handle(params UploadPostParams) middleware.Responder {
	return fn(params)
}

// UploadPostHandler interface for that can handle valid upload post params
type UploadPostHandler interface {
	Handle(UploadPostParams) middleware.Responder
}

// NewUploadPost creates a new http.Handler for the upload post operation
func NewUploadPost(ctx *middleware.Context, handler UploadPostHandler) *UploadPost {
	return &UploadPost{Context: ctx, Handler: handler}
}

/*
UploadPost swagger:route POST /upload predictor_tag uploadPost

Запрос на загрузку видоса
*/
type UploadPost struct {
	Context *middleware.Context
	Handler UploadPostHandler
}

func (o *UploadPost) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUploadPostParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UploadPostBody upload post body
//
// swagger:model UploadPostBody
type UploadPostBody struct {

	// video base64
	VideoBase64 string `json:"video_base64,omitempty"`
}

// Validate validates this upload post body
func (o *UploadPostBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UploadPostBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UploadPostBody) UnmarshalBinary(b []byte) error {
	var res UploadPostBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UploadPostOKBody upload post o k body
//
// swagger:model UploadPostOKBody
type UploadPostOKBody struct {

	// token
	Token uint64 `json:"token,omitempty"`
}

// Validate validates this upload post o k body
func (o *UploadPostOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UploadPostOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UploadPostOKBody) UnmarshalBinary(b []byte) error {
	var res UploadPostOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
